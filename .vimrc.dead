Plug 'AndrewRadev/splitjoin.vim'
Plug 'amix/open_file_under_cursor.vim'
Plug 'sheerun/vim-polyglot'
let g:SuperTabDefaultCompletionType = "<c-n>"

" highlighting rust -------------------
hi rustFuncCall ctermfg=232
hi rustModPath ctermfg=19
hi rustMacro ctermfg=236
hi rustString ctermfg=18
hi link rustModPathSep rustModPath
hi link rustMacro rustFuncCall
hi link rustKeyword rustStorage
hi link rustConditional rustStorage
hi link rustDecNumber rustString

" YouCompleteMe ---------------------------------------------------------------------------
if has("mac") && 0
    Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --rust-completer' }
    Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
    Plug 'prettier/vim-prettier', {'do': 'npm install', 'branch': 'release/1.x' }
endif

if has("mac") && 0
    "  prettier ---------------------------
    let g:prettier#autoformat = 0
    autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync

    autocmd FileType rust map <buffer> K :echo taglist("<c-r><c-w>")[0]['cmd']<cr>

    "  YouCompleteMe ----------------------
    autocmd FileType c,cpp map <buffer> K :YcmCompleter GetType<cr>
    autocmd FileType c,cpp,rust map <buffer> gD :YcmCompleter GoToDefinition<cr>
    autocmd FileType c,cpp,rust map <buffer> gd :YcmCompleter GoToDeclaration<cr>
    autocmd FileType c,cpp map <buffer> gF :YcmCompleter GoToInclude<cr>
    let g:ycm_key_list_select_completion = ['<Down>']
    let g:ycm_key_list_previous_completion = ['<Up>']
    let g:ycm_collect_identifiers_from_comments_and_strings = 1
    let g:ycm_always_populate_location_list = 1
    let g:ycm_auto_trigger=1
    let g:ycm_confirm_extra_conf = 0
    let g:ycm_enable_diagnostic_highlighting=1
    let g:ycm_enable_diagnostic_signs=1
    let g:ycm_max_diagnostics_to_display=10000
    let g:ycm_min_num_identifier_candidate_chars=0
    let g:ycm_min_num_of_chars_for_completion=99
    let g:ycm_open_loclist_on_ycm_diags=1
    let g:ycm_autoclose_preview_window_after_insertion = 1
    let g:ycm_show_diagnostics_ui=1
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_error_symbol = "✗"
    let g:ycm_warning_symbol =  "∙∙"
    let g:ycm_filetype_blacklist={ 'tagbar':1, 'qf':1, 'notes':1, 'markdown':1, 'md':1,
                \'unite':1, 'text':1, 'vimwiki':1, 'pandoc':1, 'infolog':1, 'mail':1 }
endif

" deoplete ---------------------------------------------------------------------------
if has('nvim') && 0
   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
   Plug 'sebastianmarkow/deoplete-rust'
endif
if has('nvim') && !empty(glob('~/.nvim/autoload/plug.vim')) && 0
    let racerpath = systemlist('which racer')
    if len(racerpath) 
        let g:deoplete#sources#rust#racer_binary=systemlist('which racer')[0]
        let g:deoplete#sources#rust#rust_source_path=$RUST_SRC_PATH
        call deoplete#custom#option({ 'min_pattern_length': 5 })
    endif
endif
let g:deoplete#enable_at_startup = 1

" rusty-tags --------------------------------------------
Plug 'dan-t/rusty-tags', { 'do': function('RustInit') }
Plug 'rust-lang/rust.vim'

function! RustInit(info)
if a:info.status == 'installed' || a:info.force
    !curl https://sh.rustup.rs -sSf | sh -s -- -y
    !~/.cargo/bin/rustup component list | grep -q rust-src || ~/.cargo/bin/rustup component add rust-src
    !~/.cargo/bin/cargo install --list | grep -q rusty-tags || ~/.cargo/bin/cargo install rusty-tags
    !mkdir -p ~/.rusty-tags && echo 'vi_tags = ".tags-rs"' > ~/.rusty-tags/config.toml

    if has('nvim')
        !~/.cargo/bin/cargo install --list | grep -q racer || ~/.cargo/bin/cargo install racer
    endif

    !grep -q 'RUST_SRC_PATH' ~/.bashrc ||
                \echo 'export RUST_SRC_PATH=
                \$(rustc --print sysroot)/lib/rustlib/src/rust/src/' >> ~/.bashrc
endif
endfunction

autocmd FileType rust map <buffer> K :echo taglist('<c-r><c-w>')[0]['cmd'][2:-3]<cr>
autocmd BufRead *.rs :setlocal tags=./.tags-rs;/,$RUST_SRC_PATH/.tags-rs
autocmd BufWritePost *.rs :silent! exec 
            " \"!rusty-tags vi --quiet --start-dir=" . expand('%:p:h') . "&" | redraw!

" ale -----------------------------------------------------------
Plug 'w0rp/ale'

" vim-snippets -------------------------
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
 let g:UltiSnipsExpandTrigger="<S-tab>"
 let g:UltiSnipsJumpForwardTrigger="<c-m>"
 let g:UltiSnipsJumpBackwardTrigger="<c-M>"

"  NERDTree ---------------------------
let g:NERDTreeDirArrowExpandable = "\u00a0"
let g:NERDTreeDirArrowCollapsible = "\u00a0"
let g:nerdtree_sync_cursorline = 1
let g:netrw_list_hide= '.*\.swp$,\~$,\.orig$'

"  Tagbar -----------------------------
let g:tagbar_width = 24
let g:tagbar_indent = 0
let g:tagbar_show_linenumbers = 0
